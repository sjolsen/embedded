\documentclass[11pt]{article}
\usepackage{fullpage}
\usepackage{listings}
\lstset{basicstyle=\ttfamily}
\usepackage{graphicx}
\usepackage{siunitx}
\usepackage{amsmath}
\usepackage{hyperref}

\title{CS 3468 -- Homework 4}
\author{Stuart Olsen}

\begin{document}
\maketitle

\section*{Chapter 4}
\subsection*{What is an ISA?}
An {\em Instruction Set Architecture} (ISA) is the set of features that are built into an architecture's instruction set.

\subsection*{What features does an ISA define?}
An ISA defines operations, operands, storage, addressing modes, and interrupt handling.

\subsection*{Name and describe the three most common ISA models on which architectures are based.}
The {\em Complex Instruction Set Computing} (CISC) model is characterized by complex operations comprised of a families of instructions. The {\em Reduced Instruction Set Computing} (RISC) model, on the other hand, is characterized by few and simple instructions. {\em Instruction-Level Parallelism} (ILP) models extend the RISC model to allow issuing multiple instructions in parallel.

\subsection*{Name and describe two types of ISAs that fall under each of the three ISA models.}
CISC ISAs include Intel's IA32 family of instruction set architectures and DEC's VAX ISA. RISC ISAs include the MIPS ISA family and ARM. Intel's modern IA32 implementations fall under the ILP model as well, as they heavily leverage out-of-order superscalar execution; their IA64 architecture, designed around a VLIW model, is also an ILP architecture.

\subsection*{According to the von Neumann model, list and define the major components of the CPU.}
\begin{itemize}
\item Arithmetic Logic Unit -- the component which implements the ISA's operations
\item Registers -- a type of fast memory
\item Control Unit -- the component which manages the fetch/execute cycle
\item Internal Buses -- the mechanism responsible for interconnecting the above components
\end{itemize}

\subsection*{Draw and describe the memory hierarchy of an embedded system.}
\begin{figure}
  \centering\includegraphics{memory-hierarchy.pdf}
  \caption{Embedded system memory hierarchy}
  \label{fig:memory-hierarchy}
\end{figure}

According to Figure \ref{fig:memory-hierarchy}, Level 1 Cache is at the top of the memory hierarchy, implemented within the processor itself. Further levels of cache may exist between Level 1 and Main Memory, the latter of which is usually located in one or more separate on-board components.

Below Main Memory in the memory hierarchy are Secondary and Tertiary Storage, which may take the form of mass storage devices such as flash, magnetic, or optical media, or may take the form of a network resource.

Generally, the forms of memory near the top of the hierarchy are faster than memory at lower levels, but are more expensive and thus smaller.

\subsection*{Name and describe the two most common type of units that manage memory.}
{\em Memory controllers} (MEMCs) implements thin interfaces between different types of memory within a system, such as SRAM and DRAM. {\em Memory management units} (MMUs) handle logical address translation, caching, and bus arbitration.

\section*{Additional Questions}
\subsection*{Draw the layout of the data memory space in the ATmega128 (i.e., general registers, I/O registers, and data).}
\begin{figure}
  \centering\includegraphics{atmega128-memory.pdf}
  \caption{ATmega128 Data Memory Space}
  \label{fig:atmega128-memory}
\end{figure}

{\itshape See Figure \ref{fig:atmega128-memory}.}

\subsection*{Find the memory address and the I/O address (if available) for the following special registers:}
\begin{itemize}
\item I/O registers for port A
  \begin{itemize}
  \item {\ttfamily PORTA}
  \item  {\ttfamily DDRA}
  \item  {\ttfamily PINA}
  \end{itemize}
\item Stack pointer registers: {\ttfamily SPH}, {\ttfamily SPL}
\item Status register: {\ttfamily SREG}
\item MCU control register: {\ttfamily MCUCR}
\item Interrupt control and status registers: {\ttfamily EIMSK}, {\ttfamily EIFR}
\item USART0 registers: {\ttfamily UDR0}, {\ttfamily UCSR0A}, {\ttfamily UCSR0B}, {\ttfamily UCSR0C}, {\ttfamily UBRR0H}, {\ttfamily UBRR0L}
\end{itemize}

\subsection*{Dynamic Voltage Scaling (DVS) is a technique to control energy consumption of a processor. It is based on the two equations below, where $V$ is the voltage supplied to the processor, $P$ is the power consumption, and $f$ is the scaled processor frequency. Assume $C = \SI{2.75}{\watt\per\volt^2}$, $F = \SI{3.8}{\giga\hertz}$, and $K = \SI{1.563}{\volt}$.}

\begin{align}
  P &= C \cdot V^2\\
  f &= F \cdot (1 - \frac{K}{V})
\end{align}

\subsubsection*{If $V = \SI{3}{\volt}$, what are $P$ and $f$? What is the total energy consumed by the task?}

\subsubsection*{If $V = \SI{2}{\volt}$, what are $P$ and $f$? What is the total energy consumed by the task?}

\end{document}
