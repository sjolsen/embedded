\documentclass[11pt]{article}
\usepackage{fullpage}
\usepackage{listings}
\lstset{basicstyle=\ttfamily}
\usepackage{graphicx}
\usepackage[binary]{siunitx}
\usepackage{amsmath}
\usepackage{hyperref}

\title{CS 3468 -- Homework 5}
\author{Stuart Olsen}

\begin{document}
\maketitle

\section*{Chapter 8}
\subsection*{What is the difference between an architecture-specific device driver and a generic device driver?}
An {\it architecture-specific} driver manages the hardware integrated into the master processor, while a {\it generic} driver manages hardware located on the board and not integrated into the master processor.

\subsubsection*{Give two examples of each.}
MMU and on-chip memory drivers are architecture-specific; PCI and USB drivers are generic.

\subsection*{Define at least ten types of device drivers that would be needed based on the block diagram shown in Figure 8-47.}
\begin{itemize}
\item SDRAM controller driver
\item Flash storage driver
\item EEPROM driver
\item JTAG driver
\item IR driver
\item UART driver
\item Ethernet driver
\item Display driver
\item HDLC driver
\item CAN driver
\end{itemize}

\subsection*{List and describe five types of device driver functions.}
\begin{itemize}
\item {\it Interrupt-Handling Startup} involves initialization of interrupt hardware.
\item {\it Interrupt-Handling Shutdown} involves configuring interrupt hardware into a power-off state.
\item {\it Interrupt-Handling Disable} allows other software to disable active interrupts.
\item {\it Interrupt-Handling Enable} allows other software to enable inactive interrupts.
\item {\it Interrupt-Handler Servicing} involves executing interrupt-handling code.
\end{itemize}

\subsection*{What are the three main types of interrupts? List examples in which each type is triggered.}
\begin{itemize}
\item {\it Software} interrupts are triggered explicitly by code in the instruction stream being executed.
\item {\it Internal hardware} interrupts are generated by hardware in response to conditions in the instruction stream.
\item {\it External hardware} interrupts are initiated by hardware other than the master CPU.
\end{itemize}

\subsection*{What is the difference between an auto-vectored and an interrupt-vectored scheme?}
An interrupt-vectored system provides for the ability to use different code to handle different interrupts; in an auto-vectored scheme, it is the responsibility of the single interrupt handler to discriminate between interrupts.

\subsection*{Name and describe four examples of device driver functions that can be implemented for I/O.}
\begin{itemize}
\item {\it I/O Acquire} allows software to gain singular access to I/O.
\item {\it I/O Release} allows software to free or unlock I/O.
\item {\it I/O Read} allows software to read data from I/O.
\item {\it I/O Write} allows software to write data to I/O.
\end{itemize}

\section*{Additional Questions}
\subsection*{In ATmega128, assume a 32-bit integer $A$ is stored in {\tt r4:r7}, and another 32-bit integer $B$ is stored in {\tt r8:r11}.}
\subsubsection*{Make an AVR function that implements $C = A + B$. The function stores the return in {\tt r12:r15}.}

\lstinputlisting[tabsize=4,firstline=39,lastline=51]{homework-5.asm}

\subsubsection*{Make an AVR program that implements $A {\mathrel{+}=} B$. The program shall call the function $C = A + B$ for the computation.}

\lstinputlisting[tabsize=4,firstline=28,lastline=35]{homework-5.asm}

\subsection*{The MICAz mote has $\SI{4352}{\byte}$ of data RAM. Make an AVR function to clean the data memory. The function should complete the following steps:}
\begin{itemize}
\item Clean the {\tt SREG} register;
\item Set the stack pointer to the bottom of data RAM;
\item Clear the whole data RAM to $0$.
\end{itemize}

\lstinputlisting[tabsize=4,firstline=1,lastline=21]{homework-5.asm}

\end{document}
